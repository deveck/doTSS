// 
// 
//  Author: Andreas Reiter <andreas.reiter@student.tugraz.at>
//  Author: Georg Neubauer <georg.neubauer@student.tugraz.at>

using System;
using Iaik.Tc.TPM.Library.Common;
using Iaik.Tc.TPM.Subsystems.TPMSubsystem;
using Iaik.Utils.Hash;
using System.Security.Cryptography;
using Org.BouncyCastle.Crypto;
using Iaik.Tc.TPM.Library.Common.KeyData;

namespace Iaik.Tc.TPM.Context
{

	/// <summary>
	/// Performs operations with tp keys
	/// </summary>
	public class TPMKeyClient
	{
		/// <summary>
		/// Transmits the packets to the server
		/// </summary>
		private TPMSession _tpmSession;

		public TPMKeyClient (TPMSession tpmSession)
		{
			_tpmSession = tpmSession;
		}		
		
		
		/// <summary>
		/// Creates a new Keypair on the tpm and exports it
		/// </summary>
		/// <param name="friendlyName">Specifies the local name, that must be unique in the context of the opened keystorage</param>
		/// <param name="keyUsage">Specifies the usage of the key</param>
		/// <param name="keyFlags">Sets some options for the key creation process</param>
		/// <param name="parentKey">Specifies the parent key or null for SRK</param>
		/// <returns>Client handle to newly generated key or null</returns>
		public ClientKeyHandle CreateKey(string friendlyName, TPMKeyUsage keyUsage, TPMKeyFlags keyFlags, ClientKeyHandle parentKey)
		{
			
		}
		
		
		
		private TPMCommandResponse BuildDoVerifyRequest (string commandIdentifier, Parameters parameters)
		{
			TPMCommandRequest versionRequest = new TPMCommandRequest (commandIdentifier, parameters);
			TPMCommandResponse response = _tpmSession.DoTPMCommandRequest (versionRequest);
			
			if (response.Status == false)
				throw new TPMRequestException ("An unknown tpm error occured");
			
			return response;
		}
	}
	
	public class ClientKeyHandle
	{
	    /// <summary>
		/// Unique identifier of the TPM key
		/// </summary>
		private string _keyIdentifier;
		
		/// <summary>
		/// Gets the unique key identifier, generated by the server
		/// (hash of the generated TPM_KEY structure)
		/// </summary>
		public string KeyIdentifier
		{
			get{ return _keyIdentifier; }
		}
		
		private string _friendlyName;
		
		/// <summary>
		/// Gets the friendly name of the key
		/// </summary>
		/// <remarks>
		/// The friendly name of a key is also a unique name, but only in the scope 
		/// of the used key storage. 
		///</remarks>
		public string FriendlyName
		{
			get{ return _friendlyName; }
		}
	}
}
